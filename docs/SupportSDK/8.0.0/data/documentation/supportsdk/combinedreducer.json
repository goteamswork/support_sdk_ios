{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinedReducer"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":null,"code":["let combinedReducers = Reducer1() + Reducer2() + Reducer3()"]},{"anchor":"Example","level":1,"type":"heading","text":"Example"},{"anchor":"Combine-reducers","level":2,"type":"heading","text":"Combine reducers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your application has two screens, you can model that with two states, for example "},{"type":"codeVoice","code":"TodoList"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Settings"},{"type":"text","text":" states."},{"type":"text","text":" "},{"type":"text","text":"We can then create two reducers for each of these states."}]},{"type":"codeListing","syntax":null,"code":["let todoReducer = BlockReducer(state: TodoList.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let settingsReducer = BlockReducer(state: Settings.self) { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: todoReducer + settingsReducer",")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"todoReducer"},{"type":"text","text":" will handle the “TodoList” key of state and "},{"type":"codeVoice","code":"settingsReducer"},{"type":"text","text":" will handle the “Settings” portoon of the full Store state"}]},{"anchor":"Combine-reducers-with-custom-state-key","level":2,"type":"heading","text":"Combine reducers with custom state key"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a store has a state with two keys “key1” and “key2”. We can register a reducer for each one of these keys."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We create two reducers with "},{"type":"codeVoice","code":"stateKey"},{"type":"text","text":"s of “key1” and “key2”"}]},{"type":"codeListing","syntax":null,"code":["let myReducer1 = BlockReducer(state: 1, key: \"key1\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}","","let myReducer2 = BlockReducer(state: 1, key: \"key2\") { state, action in","  guard let newState = state as? Int else { return state }","","  if action is SomeAction {","    return newState + 1","  }","","  return newState","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can then combine these 2 reducers with:"}]},{"type":"codeListing","syntax":null,"code":["let store = Suas.createStore(","  reducer: myReducer1 + myReducer2",")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"myReducer1"},{"type":"text","text":" will handle the “key1” key of state and "},{"type":"codeVoice","code":"myReducer2"},{"type":"text","text":" will handle the “key2” key of state"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/supportsdk\/combinedreducer"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinedReducer"}],"title":"CombinedReducer","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:10SupportSDK15CombinedReducerC","modules":[{"name":"SupportSDK"}],"navigatorTitle":[{"kind":"identifier","text":"CombinedReducer"}]},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations"],"generated":true}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/reduce(state:action:)":{"role":"symbol","title":"reduce(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:10SupportSDK6ActionP"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Generates a new state from the old state and an action"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/reduce(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk\/combinedreducer\/reduce(state:action:)"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/Reducer-Implementations":{"role":"collectionGroup","title":"Reducer Implementations","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/Reducer-Implementations","kind":"article","type":"topic","url":"\/documentation\/supportsdk\/combinedreducer\/reducer-implementations"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Reducer":{"role":"symbol","title":"Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"abstract":[{"type":"text","text":"Protocol that represents a reducer"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Reducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/supportsdk\/reducer"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer":{"role":"symbol","title":"CombinedReducer","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"CombinedReducer"}],"abstract":[{"type":"text","text":"Reducer that represents a combination of two reducers"},{"type":"text","text":" "},{"type":"text","text":"This reducers is not to be implemented by hand. You combine reducer by adding them with the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator."}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CombinedReducer"}],"url":"\/documentation\/supportsdk\/combinedreducer"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"role":"collection","title":"SupportSDK","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/CombinedReducer/initialState":{"role":"symbol","title":"initialState","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"initialState"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"}],"abstract":[{"type":"text","text":"Inital state value for this particular reducer"},{"type":"text","text":" "},{"type":"text","text":"This initial state will be used to populate the Store state (which represents the app state)"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/CombinedReducer\/initialState","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk\/combinedreducer\/initialstate"}}}