{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BlockAsyncAction"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SeeAlso:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AsyncAction"}]}]}]},{"anchor":"Example","level":1,"type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Performing an async network request"}]},{"type":"codeListing","syntax":null,"code":["let action = BlockAsyncAction { getState, dispatch in","","  \/\/ Read the current state from the Store","  getState()","","  \/\/ First dispatch some action syncrhonously","  dispatch(SomeAction(...))","","  let session = URLSession(configuration: .default)","  \/\/ perform a dataTask","  session.dataTask(with: urlRequest) { data, response, error in","","    if let data = data {","      \/\/ Do something with the data","       dispatch(RequestSucceeded(data: data))","","    } else if let error = error {","","       \/\/ Error happenend","       dispatch(RequestFaile(data: data))","    }","  }","}","","store.dispatch(action: MyURLAsyncAction())"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/supportsdk\/blockasyncaction"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Action","doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/AsyncAction"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"AsyncAction"},{"type":"text","text":" inline by passing a block to the init"},{"type":"text","text":" "},{"type":"text","text":"Check "},{"type":"codeVoice","code":"AsyncAction"},{"type":"text","text":" for more info"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BlockAsyncAction"}],"title":"BlockAsyncAction","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:10SupportSDK16BlockAsyncActionV","modules":[{"name":"SupportSDK"}],"navigatorTitle":[{"kind":"identifier","text":"BlockAsyncAction"}]},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction\/init(executionBlock:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction\/execute(getState:dispatch:)"]}],"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"role":"collection","title":"SupportSDK","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockAsyncAction":{"role":"symbol","title":"BlockAsyncAction","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BlockAsyncAction"}],"abstract":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"AsyncAction"},{"type":"text","text":" inline by passing a block to the init"},{"type":"text","text":" "},{"type":"text","text":"Check "},{"type":"codeVoice","code":"AsyncAction"},{"type":"text","text":" for more info"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BlockAsyncAction"}],"url":"\/documentation\/supportsdk\/blockasyncaction"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/Action":{"role":"symbol","title":"Action","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Action"}],"abstract":[{"type":"text","text":"Action to dispatch to the store"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/Action","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Action"}],"url":"\/documentation\/supportsdk\/action"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockAsyncAction/init(executionBlock:)":{"role":"symbol","title":"init(executionBlock:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"executionBlock"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"GetStateFunction","preciseIdentifier":"s:10SupportSDK16GetStateFunctiona"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"DispatchFunction","preciseIdentifier":"s:10SupportSDK16DispatchFunctiona"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction\/init(executionBlock:)","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk\/blockasyncaction\/init(executionblock:)"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/AsyncAction":{"role":"symbol","title":"AsyncAction","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncAction"}],"abstract":[{"type":"text","text":"Async action this type of action is intercepted by "},{"type":"codeVoice","code":"AsyncMiddleware"},{"type":"text","text":" and is not dispatched to the reducer."}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/AsyncAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncAction"}],"url":"\/documentation\/supportsdk\/asyncaction"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/BlockAsyncAction/execute(getState:dispatch:)":{"role":"symbol","title":"execute(getState:dispatch:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"execute"},{"kind":"text","text":"("},{"kind":"externalParam","text":"getState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GetStateFunction","preciseIdentifier":"s:10SupportSDK16GetStateFunctiona"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dispatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchFunction","preciseIdentifier":"s:10SupportSDK16DispatchFunctiona"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Execution block that is executed in the "},{"type":"codeVoice","code":"AsyncMiddleware"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"type":"codeVoice","code":"AsyncMiddleware"},{"type":"text","text":" receives an "},{"type":"codeVoice","code":"AsyncAction"},{"type":"text","text":" it does the following:"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/BlockAsyncAction\/execute(getState:dispatch:)","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk\/blockasyncaction\/execute(getstate:dispatch:)"}}}