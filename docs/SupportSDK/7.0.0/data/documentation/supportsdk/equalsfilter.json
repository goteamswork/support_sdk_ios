{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"EqualsFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona","text":"FilterFunction"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["iOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to use this filter block your state types has to implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"Note: if you implement "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" you can implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" without any extra code."},{"type":"text","text":" "},{"type":"text","text":"You only have to include "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" in the list of protocols for your type (check examples)."}]},{"anchor":"Example","level":1,"type":"heading","text":"Example"},{"anchor":"Implementing-SuasDynamicEquatable-manually","level":2,"type":"heading","text":"Implementing SuasDynamicEquatable manually"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implementing SuasDynamicEquatable without Equatable"}]},{"type":"codeListing","syntax":null,"code":["\/\/ Implement SuasDynamicEquatable manually","struct MyState: SuasDynamicEquatable {","  let value: Int","","  func isEqual(to other: Any) -> Bool {","    \/\/ Cast to same type","    guard let other = other as? MyState else { return false }","","    \/\/ Compare values","    return other.value == self.value","  }","}","","let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"]},{"anchor":"Implementing-SuasDynamicEquatable-as-an-extension","level":2,"type":"heading","text":"Implementing SuasDynamicEquatable as an extension"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your type implement equatable"}]},{"type":"codeListing","syntax":null,"code":["struct MyState: Equatable {","  let value: Int","  static func ==(lhs: MyState, rhs: MyState) -> Bool { ... }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You dont need to implement "},{"type":"codeVoice","code":"SuasDynamicEquatable"},{"type":"text","text":" just add it as an extension to "},{"type":"codeVoice","code":"MyState"},{"type":"text","text":". No extra code needed."}]},{"type":"codeListing","syntax":null,"code":["extension MyState: SuasDynamicEquatable { }"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EqualsFilter"},{"type":"text","text":" now works with "},{"type":"codeVoice","code":"MyState"}]},{"type":"codeListing","syntax":null,"code":["let subscription = store.addListener(forStateType: MyState.self, if: EqualsFilter) { newState in","  \/\/ use new state","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/supportsdk\/equalsfilter"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"type":"text","text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"EqualsFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"title":"EqualsFilter","roleHeading":"Global Variable","role":"symbol","symbolKind":"var","externalID":"s:10SupportSDK12EqualsFilterySbyp_yptcvp","modules":[{"name":"SupportSDK"}]},"hierarchy":{"paths":[["doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK"]]},"references":{"doc://com.zendesk.SupportSDK/documentation/SupportSDK/EqualsFilter":{"role":"symbol","title":"EqualsFilter","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"EqualsFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FilterFunction","preciseIdentifier":"s:10SupportSDK14FilterFunctiona"},{"kind":"text","text":"<"},{"kind":"keyword","text":"Any"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Listener filter callback that returns true if the old state and the new state are not equal."},{"type":"text","text":" "},{"type":"text","text":"You can use this filter function when adding a listener if you want your notification function to be called when the state changes."}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/EqualsFilter","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk\/equalsfilter"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK":{"role":"collection","title":"SupportSDK","abstract":[],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK","kind":"symbol","type":"topic","url":"\/documentation\/supportsdk"},"doc://com.zendesk.SupportSDK/documentation/SupportSDK/FilterFunction":{"role":"symbol","title":"FilterFunction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FilterFunction"}],"abstract":[{"type":"text","text":"Filter function that decides if the listener should be notified or not"}],"identifier":"doc:\/\/com.zendesk.SupportSDK\/documentation\/SupportSDK\/FilterFunction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FilterFunction"}],"url":"\/documentation\/supportsdk\/filterfunction"}}}